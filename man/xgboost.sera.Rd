% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/XGBoost_SERA.R
\name{XGBoost.sera}
\alias{XGBoost.sera}
\title{A wrapper that calls \code{xgboost} with weights returned from \code{sigma}.}
\usage{
XGBoost.sera(
  formula,
  train,
  test,
  sigma = NULL,
  I = 1000,
  nrounds = 100,
  parameters = list(),
  verbose = 0,
  ...
)
}
\arguments{
\item{formula}{A \code{formula} object.}

\item{train}{A \code{data.frame} or \code{tibble} with the training data.}

\item{test}{A \code{data.frame} or \code{tibble} with the test data.}

\item{sigma}{A \code{vector} with the weights assigned to each instance.}

\item{I}{A number. It is the number of intervals taken to discretize SERA.}

\item{nrounds}{A number. Number of boosters to train.}

\item{parameters}{Additional parameters that are passed to \code{xgboost}. Check \link[xgboost]{xgboost} for more information.}

\item{verbose}{Prints the error for each iteration. The error printed defaults to the root mean squared error (RMSE).}

\item{...}{Additional parameters to be passed into the model. Check \link[xgboost]{xgboost} for more information.}
}
\value{
A \code{list} with the following elements:
\itemize{
\item \code{trues} a \code{vector} with the true values of the test set.
\item \code{preds} a \code{vector} with the predictions obtained from the test set.
\item \code{time} a \code{vector} with the train and test time (in seconds).
}
}
\description{
A wrapper that calls \link[xgboost]{xgboost} with weights returned from \code{\link{sigma}}.
}
\details{
Ideally, \code{sigma} should be provided based on domain knowledge of the target variable.

When \code{sigma} is not provided, an automatic approach based on adjusted box plot statistics
is used to retrieve the type of imbalance a given target variable has:

\itemize{
\item \code{high} if there are outliers above the upper fence of the adjusted box plot;
\item \code{low} if there are outliers below the lower fence of the adjusted box plot;
\item \code{both} if there are outliers below/above the lower/upper fences of the adjusted box plot.

}

The number of intervals, \code{I}, is set as 1000 by default.
When the weights are not provided, this parameter is used to calculate them.
Note that this parameter can influence the weights assigned to each instance.
Changing its value may lead to a better generalization problem.
}
\examples{

## A simple call to the wrapper where sigma are generated automatically:

library(xgboost)
library(dplyr)

data("NO2Emissions")
n <- nrow(NO2Emissions)
s <- sample(1:n, size = n*0.8)

formula <- LNO2 ~ .
train <- NO2Emissions \%>\% dplyr::slice(s)
test <- NO2Emissions \%>\% dplyr::slice(-s)

res <- XGBoost.sera(formula, train, test)
res

## Ideally, there should be domain knowledge about the target variable:

library(xgboost)
library(dplyr)
library(IRon)

data("NO2Emissions")
n <- nrow(NO2Emissions)
s <- sample(1:n, size = n*0.8)

I = 1000
steps <- seq(0, 1, 1/I)

formula <- LNO2 ~ .
train <- NO2Emissions \%>\% dplyr::slice(s)
test <- NO2Emissions \%>\% dplyr::slice(-s)

y <- train$LNO2

control.points <- matrix(c(1.1, 0, 0, 3.7, 0, 0, 5, 1, 0), byrow = TRUE, ncol=3)
ph.ctrl <- phi.control(y = y, method = "range", control.pts = control.points)
phi <- phi(y = y, phi.parms = ph.ctrl)
sigma <- sigma(phis = phi, steps = steps)

# If you want to add some model parameters
params <- list(max_depth=5, eta = 10^{-1})

res <- XGBoost.sera(formula = formula,
                    train = train,
                    test = test,
                    sigma = sigma,
                    parameters = params)
res


}
\references{
Silva A., Ribeiro R., Moniz N., Model Optimization in Imbalanced Regression,
\url{https://arxiv.org/abs/2206.09991}

Ribeiro R., Moniz N., Imbalanced regression and extreme value prediction,
\url{https://link.springer.com/article/10.1007/s10994-020-05900-9}
}
\seealso{
\link[xgboost]{xgboost}, \code{\link{sigma}}, \link[IRon]{phi}
}
